module Fractal_tier2;

use Structures: all;
use Numerical: all;

export all;

/** <!--*******************************************************************-->
 *
 * @fn int, complex escapeTimeAndValue(complex z, int depth)
 *
 *   @brief iteratively computes c = c*c + z starting from c=z.
 *          terminates either when |c| > 2 or depth iterations
 *          have been performed.
 *          NB: Besides "norm" there exists "normSq" which computes |c|^2.
 *
 *   @return number of iterations until termination and final complex value
 *****************************************************************************/
int, complex escapeTimeAndValue(complex z, int depth)
{
  /**
   * fill in here...
   */
}

/** <!--*******************************************************************-->
 *
 * @fn int[*], complex[*] escapeTimeAndValue(complex[*] z, int depth)
 *
 *   @brief maps escapeTimeAndValue to an entire array of complex numbers
 *
 *****************************************************************************/
inline
int[.,.], complex[.,.] escapeTimeAndValue( complex[.,.] plane, int depth)
{
  /**
   * fill in here...
   */
}


/** <!--*******************************************************************-->
 *
 * @fn double normalizedIterationCount(int n, complex zn)
 *
 *   @brief normalizes the iteration counts in "n" taking the distance of the 
 *          corresponding final complex numbers from the origin into account.
 *          For corresponding elements in "n" and "zn", we have:
 *             0.0                          iff |zn| <= 2
 *             (n+1) - log2( log2( |zn|))   otherwise
 *
 *   @return the normalized iteration counts
 *****************************************************************************/
inline
double[*] normalizedIterationCount(int[*] n, complex[*] zn)
{
  /**
   * fill in here...
   */
}


/** <!--*******************************************************************-->
 *
 * @fn color[.,.] doubleArrayToRGB( double[.,.] a)
 *
 *   @brief transforms an array of doubles into RGB values, by 
 *          FIRST scaling them into values between 0.0 and 360.0, and
 *          THEN  using them as HSB angles to choose a color.
 *          NB: Color8 provides a function Hsb2Rgb for the actual
 *              conversion.
 *  
 *   @return RGB values
 *****************************************************************************/
inline
Color8::color[.,.] doubleArrayToRGB( double[.,.] a)
{
  /**
   * fill in here...
   */
}




