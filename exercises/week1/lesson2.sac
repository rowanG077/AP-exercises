use StdIO: all;
use Array: all;

// Exercise 5
// • ([3,0,5], [])[[]]?

//   I'm not sure what this means. Even printing it directly using sac
//   results in a syntax error. I guess this should be a reshape?
//   reshape([3,0,5], [])[[]]? If that's the case the result of
//   reshape([3,0,5], []) is kind of like an empty vector. It's odd.
//   because you a zero width 5 element vector. Which doesn't exist.
//   The [[]] operator also does nothing since it doesn't traverse the data
//   structure. So the final result is:
//   [] with shape [3, 0, 5] and dimensionality 3

// • ([3,0,5], [])[[1]]?

//   [] with shape [0, 5] and dimensionality 2

// • ([3,0,5], [])[[1,0]]?

//   This is illegal. Because of the following domain restriction:
//   ∀i∈{0,…,shape(iv)[[0]]}:iv[[i]] < shape(a)[[i]]
//   	shape(iv)[[0]] is 2. 
//   	iv[[0]] < shape(a)[[0]] => 1 < 3 OK
//    iv[[1]] < shape(a)[[0]] => 0 < 0 VIOLATION

// • mat[reshape([2,0], [])]?
//   reshape([2,0], []) is just [] with shape [2, 0] which means it can't be used
//   as an index since it violates the dim(iv) == 1 domain restriction.

// Exercise 6

// • min(reshape([3,0,5], []), 42)?
//   Just the empty vector [] with shape [3, 0, 5].

// • reshape([3,0,5], []) + reshape([3,0,5], [])?
//   Either it won't compile because no the array isn't known to hold numeric types.
//   Or it compiles and allows this but the result is just the empty vector with shape [3,0,5].

// • reshape([1,1], [1]) + reshape([1], [1])?
//   It won't compile due to shape mismatch.

int main()
{
	print(reshape([1,1], [1]) + reshape([1], [1]));

	// Wtf is going on here?????
	// Ask on thursday
	// a = reshape([2,0], []);
	// iv = [2];
	// print(a);
	// print(dim(a));
	// print(iv[0]);
	// print(shape(a)[[0]]);

	// print(mat[reshape([2,0], [])]);

	return 0;
}
