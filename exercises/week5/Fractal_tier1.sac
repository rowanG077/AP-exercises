module Fractal_tier1;

use Structures: all;
use Numerical: all;
use StdIO: all;

export all;


/** <!--*******************************************************************-->
 *
 * @fn : complex[.,.] genComplexArray( int[2] shp, complex cmin, complex cmax)
 *
 *   @brief generates an array of complex numbers with shape "shp" and
 *          linearly increasing/decreasing values between "cmin" and "cmax".
 *          The element at index [0,0] should be "cmin". Increases in the
 *          2nd index (!) should reflect increases in the real values!
 *
 *****************************************************************************/
inline
complex[.,.] genComplexArray( int[2] shp, complex cmin, complex cmax)
{
  cminD = todv(cmin); // 2
  cmaxD = todv(cmax); // 2
  stepSize = (cmaxD - cminD) / [tod(shp[1]), tod(shp[0])]; // 6

  return with {
		(. <= [i,j] <= .): ( toc(cminD + tod([j, i]) * stepSize)) ;
	} : genarray(shp, toc(0.0, 0.0)); // shp * 8

  // total flops: 2 + 2 + 6 + x * y * 8 = 10 + shp * 8
}


/** <!--*******************************************************************-->
 *
 * @fn int escapeTime(complex z, int depth)
 *
 *   @brief iteratively computes c = c*c + z starting from c=z.
 *          terminates either when |c| > 2 or depth iterations
 *          have been performed.
 *          NB: Besides "norm" there exists "normSq" which computes |c|^2.
 *
 *   @return number of iterations done
 *****************************************************************************/
inline
int escapeTime(complex z, int depth)
{
  it = 0;
  c = z;
  while (norm(c) <= 2.0 && it < depth) {
    c = c * c + z;
    it += 1;
  }
  return it;
}

/** <!--*******************************************************************-->
 *
 * @fn int[*] escapeTime(complex[*] z, int depth)
 *
 *   @brief maps escapeTime to an entire array of complex numbers
 *
 *****************************************************************************/

inline
int[*] escapeTime( complex[*] plane, int depth)
{
  return with {
    (. <= iv <= .) : (escapeTime(plane[iv], depth));
  } : genarray(shape(plane), 0);
}

/** <!--*******************************************************************-->
 *
 * @fn color[.,.] intArrayToMonochrome( int[.,.] a)
 *
 *   @brief converts non-negative integer values into color values using
 *          a logarithmic 256 element clut from black to red.
 *****************************************************************************/
inline
Color8::color[.,.] intArrayToMonochrome( int[.,.] a)
{
  clut = genLogarithmicClut( 0.4d, 0.9d, Color8::black(), Color8::red());

  a = (a * 255) / maxval(a);

  // We could do this with overSel but there isn't much
  // point. overSel uses a with loop as well.
  d = with {
        ( .<= iv <= .) : clut[ a[ iv]];
      } : genarray( shape(a), Color8::black());

  return( d);
}
