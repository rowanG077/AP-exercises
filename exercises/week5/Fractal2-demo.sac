use Fractal_tier1:all;
use Fractal_tier2:all;
use Structures: all;
use StdIO: all;
use Benchmarking: all;

/*
 * Expected output:

***** genComplexArray( [6,4], toc( [-2.2, 1.0]), toc([0.8, -1.0])):

Dimension:  2
Shape    : <  6,  4>
|(-2.2, 1) (-1.5, 1) (-0.7, 1) (0.05, 1) |
|(-2.2, 0.67) (-1.5, 0.67) (-0.7, 0.67) (0.05, 0.67) |
|(-2.2, 0.33) (-1.5, 0.33) (-0.7, 0.33) (0.05, 0.33) |
|(-2.2, 0) (-1.5, 0) (-0.7, 0) (0.05, 0) |
|(-2.2, -0.33) (-1.5, -0.33) (-0.7, -0.33) (0.05, -0.33) |
|(-2.2, -0.67) (-1.5, -0.67) (-0.7, -0.67) (0.05, -0.67) |

***** escapeTimeAndValue( a, 1024):

Dimension:  2
Shape    : <  6,  4>
|    0    2    2    4|
|    0    2    4   20|
|    0    4   22 1025|
|    0 1025 1025 1025|
|    0    4   22 1025|
|    0    2    4   20|

Dimension:  2
Shape    : <  6,  4>
|(-2.2, 1) (-4.9, 2.3) (0.6, 2) (-1.3, -2.3) |
|(-2.2, 0.67) (-3, 0.14) (1.9, 0.76) (1.2, -3.1) |
|(-2.2, 0.33) (-2.8, 2.8) (-1.5, 2) (-0.043, 0.31) |
|(-2.2, 0) (0.41, 0) (-0.47, 0) (0.053, 0) |
|(-2.2, -0.33) (-2.8, -2.8) (-1.5, -2) (-0.043, -0.31) |
|(-2.2, -0.67) (-3, -0.14) (1.9, -0.76) (1.2, 3.1) |

***** normalizedIterationCount( bt, bv):

Dimension:  2
Shape    : <  6,  4>
|6.517855e-01 1.708304e+00 2.941081e+00 4.506202e+00 |
|7.359129e-01 2.329280e+00 4.947974e+00 2.019403e+01 |
|7.935116e-01 4.020503e+00 2.263662e+01 0.000000e+00 |
|8.141290e-01 0.000000e+00 0.000000e+00 0.000000e+00 |
|7.935116e-01 4.020503e+00 2.263662e+01 0.000000e+00 |
|7.359129e-01 2.329280e+00 4.947974e+00 2.019403e+01 |

***** doubleArrayToRGB( nvs):

Dimension:  3
Shape    : <  6,  4,  3>
<204 102 81 > <204 136 81 > <204 175 81 > <181 204 81 >
<204 104 81 > <204 157 81 > <167 204 81 > <204 81 161 >
<204 106 81 > <197 204 81 > <204 255 81 > <204 81 81 >
<204 106 81 > <204 81 81 > <204 81 81 > <204 81 81 >
<204 106 81 > <197 204 81 > <204 81 83 > <204 81 81 >
<204 104 81 > <204 157 81 > <167 204 81 > <204 81 161 >

 */


int main()
{
   intv = getInterval("mandelbrot-tier2", 0);

   start(intv);
   // Because -o profile flag is not accurate we manually calculate
   // how many floating point operations every functions does and
   // use the total time of the program to calculate the final GLOPS.
   // Every line in each used function is annotated with the number
   // of floating point operations it performs.
   
   // flop: 1280 * 1280 * 8 + 10 = 13107210
   a = genComplexArray( [1280,1280], toc( [-2.2, 1.0]), toc([0.8, -1.0]));

   // flop: 14 * 1280 * 1280 * 1024 = 23488102400
   bt, bv = escapeTimeAndValue( a, 1024);

   // flop: 1280 * 1280 * 8 = 13107200
   nvs = normalizedIterationCount( bt, bv);

   // flop: 1280 * 1280 * 7 = 11468800
   rgbs = doubleArrayToRGB( nvs);

   // total flop: 23525785610
   
   r0 = red(rgbs[0][0]);

   end(intv);
   
   printResult(intv);

   destroyInterval(intv);

   return r0;
}
