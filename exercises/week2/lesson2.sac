use StdIO: all;
use Array: all;

// Exercise 5
// • ([3,0,5], [])[[]]?

//   I'm not sure what this means. Even printing it directly using sac
//   results in a syntax error. I guess this should be a reshape?
//   reshape([3,0,5], [])[[]]? If that's the case the result of
//   reshape([3,0,5], []) is kind of like an empty vector. It's odd.
//   because you a zero width 5 element vector. Which doesn't exist.
//   The [[]] operator also does nothing since it doesn't traverse the data
//   structure. So the final result is:
//   [] with shape [3, 0, 5] and dimensionality 3

// • ([3,0,5], [])[[1]]?

//   [] with shape [0, 5] and dimensionality 2

// • ([3,0,5], [])[[1,0]]?

//   This is illegal. Because of the following domain restriction:
//   ∀i∈{0,…,shape(iv)[[0]]}:iv[[i]] < shape(a)[[i]]
//   	shape(iv)[[0]] is 2. 
//   	iv[[0]] < shape(a)[[0]] => 1 < 3 OK
//    iv[[1]] < shape(a)[[0]] => 0 < 0 VIOLATION

// • mat[reshape([2,0], [])]?
//   reshape([2,0], []) is just [] with shape [2, 0] which means it can't be used
//   as an index since it violates the dim(iv) == 1 domain restriction.

// Exercise 6

// • min(reshape([3,0,5], []), 42)?
//   Just the empty vector [] with shape [3, 0, 5].

// • reshape([3,0,5], []) + reshape([3,0,5], [])?
//   Either it won't compile because no the array isn't known to hold numeric types.
//   Or it compiles and allows this but the result is just the empty vector with shape [3,0,5].

// • reshape([1,1], [1]) + reshape([1], [1])?
//   It won't compile due to shape mismatch.

// Exercise 7.
void exercise7() {
	a = [
		[ [1, 2], [3, 4], [5, 6], [7, 8] ], 
		[ [9, 10], [11, 12], [13, 14], [15, 16] ]
	];

	// drop(v, a):
	v = [1, 2, 1];

	print(drop(v, a));
	print(take((v ++ genarray([dim(a) - shape(v)[[0]]], 0)) - shape(a), a));

	// tile(v, o, a):
	v = [2, 2, 1];
	o = [0, 2, 1];

	print(tile(v, o, a));
	print(take(v, drop(o, a)));

	// shift([n], e, a):
	n = 1;
	e = 1337;

	print(shift([n], e, a));

	shiftArr = genarray(modarray(shape(a), [0], abs(n)), e);
	selector = modarray(genarray([dim(a)], 0), [0], abs(n) - n);
	result = tile(shape(a), selector, shiftArr ++ a ++ shiftArr);
	print(result);

	// shift([m,n], e, a)
	m = 0;
	n = 2;
	e = 1337;

	print(shift([m, n], e, a));

	shiftArr = genarray(modarray(modarray(shape(a), [0], abs(m)), [1], abs(n) + shape(a)[1]), e);
	print(shiftArr);
	lArr = genarray(modarray(drop([1], shape(a)), [0], abs(n)), e);
	print(lArr);
	selector = [abs(m) - m, abs(n) - n] ++ genarray([dim(a) - 2], 0);
	print(selector);
	//ai = shiftArr ++ (f) ++ shiftArr    -- where f would be the concat of nested arrays
	//result = tile(shape(a), selector, ai);
	//print(result);	

	// We don't know how to apply a function to each nested element in an array :(.

	// rotate([n], a)
	n = -3;

	print(rotate([n], a));
	
	n = shape(a)[[0]] - (n % shape(a)[[0]]);
	selector = modarray(genarray([dim(a)], 0), [0], n);
	result = tile(shape(a), selector, a ++ a);
	print(result);


	// rotate([m,n], a)
	// We don't know how to apply a function to each nested element in an array :(.
	// The same problem as with shift.
}

void exercise8() {
	// We don't know how to apply a function to each nested element in an array :(.
	// The same problem as with exercise 7 shift and rotate.
	return;
}

int main()
{
	exercise7();
	exercise8();

	return 0;
}
